plugins {
	id 'java'
	id 'com.diffplug.spotless' version '6.23.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.liquibase.gradle' version '2.2.0'
	id 'jacoco'
}
// Настройки проекта (из MP-153)
group = 'ru.mentee.power'
version = '1.0.0'
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

repositories {
	mavenCentral()
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

// Версии зависимостей (расширение конфигурации из MP-153)
ext {
	versions = [
			// Плагины
			spotless          : '6.23.3',

			// Основные зависимости
			postgresql        : '42.6.0',
			lombok           : '1.18.30',

			// Логирование
			slf4j            : '2.0.9',
			logback          : '1.4.11',

			// Тестирование
			junit            : '5.10.0',
			assertj          : '3.24.2',
			h2               : '2.2.224',  // Добавлено для тестов

			// Инструменты
			googleJavaFormat : '1.17.0'
	]
}

dependencies {
	// Основные зависимости
	implementation 'org.postgresql:postgresql:42.6.0'
	implementation 'org.slf4j:slf4j-api:2.0.9'
	implementation 'ch.qos.logback:logback-classic:1.4.11'

	// Тестирование
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
	testImplementation 'org.assertj:assertj-core:3.24.2'

	// TestContainers
	testImplementation "org.testcontainers:testcontainers:1.20.4"
	testImplementation "org.testcontainers:junit-jupiter:1.20.4"
	testImplementation "org.testcontainers:postgresql:1.20.4"

	// H2 (для H2-тестов)
	testImplementation 'com.h2database:h2:2.2.224'

	// Дополнительные утилиты
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'

	// Liquibase - основные зависимости
	implementation 'org.liquibase:liquibase-core:4.27.0'

	liquibaseRuntime 'org.liquibase:liquibase-core:4.27.0'
	liquibaseRuntime 'org.postgresql:postgresql:42.7.3'
	liquibaseRuntime 'info.picocli:picocli:4.7.6'

	// Логирование
	implementation 'ch.qos.logback:logback-classic'
}

// Обязательная секция для TestContainers
dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:1.19.1"
	}
}



liquibase {
	activities {
		main {
			changelogFile 'src/main/resources/db/migrations_161/changelog.yaml'
			url 'jdbc:postgresql://localhost:5432/mentee_power_db'
			username 'mentee'
			password System.getenv('DB_PASSWORD') ?: 'password'
			driver 'org.postgresql.Driver'
			defaultSchemaName 'mentee_power'
			contexts 'dev,default'
		}

		// Конфигурация для ТЕСТОВ (обязательно!)
		// Поддерживает переменные окружения для CI (Testcontainers)
		test {
			changelogFile 'src/main/resources/db/migrations_161/changelog.yaml'
			url System.getenv('LIQUIBASE_TEST_URL') ?: 'jdbc:postgresql://localhost:5433/mentee_power_test_db'
			username System.getenv('LIQUIBASE_TEST_USER') ?: 'mentee'
			password System.getenv('LIQUIBASE_TEST_PASSWORD') ?: 'password123'
			driver 'org.postgresql.Driver'
			defaultSchemaName 'mentee_power'
			contexts 'test,default'
		}

		// Конфигурация для production (без тестовых данных)
		prod {
			changelogFile 'src/main/resources/db/migrations_161/changelog.yaml'
			url System.getenv('PROD_DB_URL') ?: 'jdbc:postgresql://localhost:5432/mentee_power_prod'
			username System.getenv('PROD_DB_USER') ?: 'mentee_power'
			password System.getenv('PROD_DB_PASSWORD')
			driver 'org.postgresql.Driver'
			defaultSchemaName 'mentee_power'
			contexts 'prod,default'
		}
	}
}

// Задачи для удобства работы с разными средами
task liquibaseUpdateTest {
	group = 'liquibase'
	description = 'Применить миграции к тестовой БД (для локальной разработки)'
	// В CI эта задача может использовать переменные окружения для Testcontainers
	doLast {
		project.liquibase.runList = 'test'
		project.tasks.getByName('update').actions.each { it.execute(project.tasks.getByName('update')) }
	}
}

// Задача для CI: запускает тест, который применяет миграции через Testcontainers
task liquibaseValidateCi(type: Test) {
	group = 'liquibase'
	description = 'Проверить применение миграций через Testcontainers в CI'
	useJUnitPlatform()
	include '**/LiquibaseMigrationTest.class'
	filter {
		includeTestsMatching 'ru.mentee.power.migration.LiquibaseMigrationTest.shouldApplyAllSqlMigrationsThroughYamlChangelogSuccessfully'
	}
	testLogging {
		events 'passed', 'skipped', 'failed'
		showStandardStreams = true
	}
}

task liquibaseUpdateProd {
	group = 'liquibase'
	description = 'Применить миграции к production БД'
	doLast {
		project.liquibase.runList = 'prod'
		project.tasks.getByName('update').actions.each { it.execute(project.tasks.getByName('update')) }
	}
}


spotless {
	format 'misc', {
		target '*.gradle', '.gitattributes', '.gitignore'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}
	java {
		googleJavaFormat("${versions.googleJavaFormat}").aosp().reflowLongStrings().skipJavadocFormatting()
		formatAnnotations()
		licenseHeader '/* @MENTEE_POWER (C)$YEAR */'
	}
}

compileJava {
	options.encoding = 'UTF-8'
}

compileTestJava {
	options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

test {
	useJUnitPlatform()
	// JaCoCo автоматически генерирует отчет после выполнения тестов
	finalizedBy jacocoTestReport

	// В CI миграции применяются автоматически через Testcontainers в тестах Liquibase
	// Для локальной разработки можно запустить вручную: ./gradlew liquibaseUpdateTest test

	systemProperty 'DB_URL', 'jdbc:postgresql://localhost:5433/mentee_power_test_db'
	systemProperty 'DB_USER', 'mentee'
	systemProperty 'DB_PASSWORD', 'password123'
}

// Настройка JaCoCo для генерации отчетов покрытия кода
jacoco {
	toolVersion = '0.8.11'
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('reports/jacoco/test/html')
	}
}
